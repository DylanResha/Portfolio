     1                                  ; Dylan Resha	
     2                                  ; 10/30/2020
     3                                  ; Asignment 7 surprise
     4                                  ;For this assignment you are to be a data investigator.  That is, you will be given some data, and will be assigned to find the hidden message within.  Following the decipher rules below, you should be able to figur
     5                                  
     6                                  SECTION .data
     7                                  ;;surprise
     8                                  
     9 00000000 2E2F75313233793536-     surprise: db 46,47,117,49,50,51,121,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,122,123,124,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108
    10 00000009 3738393A3B3C3D3E3F-
    11 00000012 404142434445464748-
    12 0000001B 494A4B4C4D4E4F5051-
    13 00000024 5253547A7B7C58595A-
    14 0000002D 5B5C5D5E5F60616263-
    15 00000036 6465666768696A6B6C-
    16 0000003F 6D6E6F707172737475-
    17 00000048 767778797A7B7C7D2E-
    18 00000051 2F3076327834353637-
    19 0000005A 38393A3B3C3D3E3F40-
    20 00000063 414243444546474849-
    21 0000006C 4A4B4C4D4E4F505152-
    22 00000075 53547A7B7C58595A5B-
    23 0000007E 5C5D5E5F6061626364-
    24 00000087 65666768696A6B6C6D-
    25 00000090 6E6F70717273747576-
    26 00000099 7778797A7B7C7D2E74-
    27 000000A2 75765778797A363738-
    28 000000AB 393A3B3C3D3E3F4041-
    29 000000B4 42434445464748494A-
    30 000000BD 4B4C4D4E4F50515253-
    31 000000C6 54556F5758595A5B5C-
    32 000000CF 5D5E5F606162636465-
    33 000000D8 666768696A6B6C6D6E-
    34 000000E1 6F7071727374757677-
    35 000000EA 78797A7B7C7D2E2F30-
    36 000000F3 763278343536373839-
    37 000000FC 3A3B3C3D3E3F404142-
    38 00000105 434445464748494A4B-
    39 0000010E 4C4D4E4F5051525354-
    40 00000117 6E6A7058595A5B5C5D-
    41 00000120 5E5F60616263646566-
    42 00000129 6768696A6B6C6D6E6F-
    43 00000132 707172737475767778-
    44 0000013B 797A7B7C7D2E2F7531-
    45 00000144 32337935363738393A-
    46 0000014D 3B3C3D3E3F40414243-
    47 00000156 4445464748494A4B4C-
    48 0000015F 4D4E4F505152536D79-
    49 00000168 6F8271595A5B5C5D5E-
    50 00000171 5F6061626364656667-
    51 0000017A 68696A6B6C6D6E6F70-
    52 00000183 717273747576777879-
    53 0000018C 7A7B7C7D2E2F303132-
    54 00000195 333435363738393A3B-
    55 0000019E 3C3D3E3F4041424344-
    56 000001A7 45464748494A4B4C4D-
    57 000001B0 4E4F5051526C6D6E7F-
    58 000001B9 7077725A5B5C5D5E5F-
    59 000001C2 606162636465666768-
    60 000001CB 696A6B6C6D6E6F7071-
    61 000001D4 72737475767778797A-
    62 000001DD 7B7C7D2E2F30313233-
    63 000001E6 3435363738393A3B3C-
    64 000001EF 3D3E3F404142434445-
    65 000001F8 464748494A4B4C4D4E-
    66 00000201 4F50516B6C7D6E6F6B-
    67 0000020A 7C72735B5C5D5E5F60-
    68 00000213 616263646566676869-
    69 0000021C 6A6B6C6D6E6F707172-
    70 00000225 737475767778797A7B-
    71 0000022E 7C7D2E2F3031323334-
    72 00000237 35363738393A3B3C3D-
    73 00000240 3E3F40414243444546-
    74 00000249 4748494A4B4C4D4E4F-
    75 00000252 506A6B7E7F6E6F706C-
    76 0000025B 7273745C5D5E5F6061-
    77 00000264 62636465666768696A-
    78 0000026D 6B6C6D6E6F70717273-
    79 00000276 7475767778797A7B7C-
    80 0000027F 7D2E2F303132333435-
    81 00000288 363738393A3B3C3D3E-
    82 00000291 3F4041424344454647-
    83 0000029A 48494A4B4C4D4E4F69-
    84 000002A3 706B6C6D7E6F707184-
    85 000002AC 7E74755D5E5F606162-
    86 000002B5 636465666768696A6B-
    87 000002BE 6C6D6E6F7071727374-
    88 000002C7 75767778797A7B7C7D-
    89 000002D0 2E2F30313233343536-
    90 000002D9 3738393A3B3C3D3E3F-
    91 000002E2 404142434445464748-
    92 000002EB 494A4B4C4D4E68696A-
    93 000002F4 6B726D6E6F706C7273-
    94 000002FD 8475765E5F60616263-
    95 00000306 6465666768696A6B6C-
    96 0000030F 6D6E6F707172737475-
    97 00000318 767778797A7B7C7D2E-
    98 00000321 2F3031323334353637-
    99 0000032A 38393A3B3C3D3E3F40-
   100 00000333 414243444546474849-
   101 0000033C 4A4B4C4D676369756B-
   102 00000345 6C6D6E6F7071727384-
   103 0000034E 7576775F6061626364-
   104 00000357 65666768696A6B6C6D-
   105 00000360 6E6F70717273747576-
   106 00000369 7778797A7B7C7D2E2F-
   107 00000372 303132333435363738-
   108 0000037B 393A3B3C3D3E3F4041-
   109 00000384 42434445464748494A-
   110 0000038D 4B4C666768696A6B6C-
   111 00000396 6D6E6F708384737475-
   112 0000039F 767778606162636465-
   113 000003A8 666768696A6B6C6D6E-
   114 000003B1 6F7071727374757677-
   115 000003BA 78797A7B7C7D2E2F30-
   116 000003C3 313233343536373839-
   117 000003CC 3A3B3C3D3E3F404142-
   118 000003D5 434445464748494A4B-
   119 000003DE 6578676869656B6C6D-
   120 000003E7 796F706C7273847576-
   121 000003F0 7D7879616263646566-
   122 000003F9 6768696A6B6C6D6E6F-
   123 00000402 707172737475767778-
   124 0000040B 797A7B7C7D2E2F3031-
   125 00000414 32333435363738393A-
   126 0000041D 3B3C3D3E3F40414243-
   127 00000426 4445464748494A6465-
   128 0000042F 667768696A7D6C6D6E-
   129 00000438 7F7071727374758177-
   130 00000441 78747A626364656667-
   131 0000044A 68696A6B6C6D6E6F70-
   132 00000453 717273747576777879-
   133 0000045C 7A7B7C7D2E2F303132-
   134 00000465 333435363738393A3B-
   135 0000046E 3C3D3E3F4041424344-
   136 00000477 4546474849636A6566-
   137 00000480 676E696A6B6C6D6E6F-
   138 00000489 707172737A75767778-
   139 00000492 747A7B636465666768-
   140 0000049B 696A6B6C6D6E6F7071-
   141 000004A4 72737475767778797A-
   142 000004AD 7B7C7D2E2F30313233-
   143 000004B6 3435363738393A3B3C-
   144 000004BF 3D3E3F404142434445-
   145 000004C8 464748626364656672-
   146 000004D1 68696A6B6C6D7E6F70-
   147 000004DA 716D7374758677788B-
   148 000004E3 7A7B7C646566676869-
   149 000004EC 6A6B6C6D6E6F707172-
   150 000004F5 737475767778797A7B-
   151 000004FE 7C7D2E2F3031323334-
   152 00000507 35363738393A3B3C3D-
   153 00000510 3E3F40414243444546-
   154 00000519 476162636460667968-
   155 00000522 696A666C6D6E6F8283-
   156 0000052B 72737475767778797A-
   157 00000534 817C7D65666768696A-
   158 0000053D 6B6C6D6E6F70717273-
   159 00000546 7475767778797A7B7C-
   160 0000054F 7D2E2F303132333435-
   161 00000558 363738393A3B3C3D3E-
   162 00000561 3F4041424344454660-
   163 0000056A 616263746066676869-
   164 00000573 6A6B6C686E6F707C72-
   165 0000057C 737475767788797A7B-
   166 00000585 7C7D7E666768696A6B-
   167 0000058E 6C6D6E6F7071727374-
   168 00000597 75767778797A7B7C7D-
   169 000005A0 2E2F30313233343536-
   170 000005A9 3738393A3B3C3D3E3F-
   171 000005B2 4041424344455F6061-
   172 000005BB 6263646B666768696A-
   173 000005C4 716C6D6E6F70717273-
   174 000005CD 747B76777879857B7C-
   175 000005D6 7D7E7F6768696A6B6C-
   176 000005DF 6D6E6F707172737475-
   177 000005E8 767778797A7B7C7D2E-
   178 000005F1 2F3031323334353637-
   179 000005FA 38393A3B3C3D3E3F40-
   180 00000603 414243445E5F606162-
   181 0000060C 696465667968697A6B-
   182 00000615 776D6E6F706C727374-
   183 0000061E 7576778A797A7B7C7D-
   184 00000627 7E7F8068696A6B6C6D-
   185 00000630 6E6F70717273747576-
   186 00000639 7778797A7B7C7D2E2F-
   187 00000642 303132333435363738-
   188 0000064B 393A3B3C3D3E3F4041-
   189 00000654 42435D5E5F60716263-
   190 0000065D 7665666778696A6B6C-
   191 00000666 6D6E6F708372738475-
   192 0000066F 7677788B7A7B777D7E-
   193 00000678 858081696A6B6C6D6E-
   194 00000681 6F7071727374757677-
   195 0000068A 78797A7B7C7D2E2F30-
   196 00000693 313233343536373839-
   197 0000069C 3A3B3C3D3E3F404142-
   198 000006A5 5C5D595F7061626364-
   199 000006AE 656667686F6A6B6C68-
   200 000006B7 6E6F70718273747576-
   201 000006C0 727879857B7C837E7F-
   202 000006C9 8B81826A6B6C6D6E6F-
   203 000006D2 707172737475767778-
   204 000006DB 797A7B7C7D2E2F3031-
   205 000006E4 32333435363738393A-
   206 000006ED 3B3C3D3E3F40414243-
   207 000006F6 4445464748494A4B4C-
   208 000006FF 4D4E4F505152537A7B-
   209 00000708 7C5758595A5B5C5D5E-
   210 00000711 5F6061626364656667-
   211 0000071A 68696A6B6C6D6E6F70-
   212 00000723 717273747576777879-
   213 0000072C 7A7B7C7D2E2F303132-
   214 00000735 333435363738393A3B-
   215 0000073E 3C3D3E3F4041424344-
   216 00000747 45464748494A4B4C4D-
   217 00000750 4E4F505152537A7B7C-
   218 00000759 5758595A5B5C5D5E5F-
   219 00000762 606162636465666768-
   220 0000076B 696A6B6C6D6E6F7071-
   221 00000774 72737475767778797A-
   222 0000077D 7B7C7D             
   223                                  
   224                                  surpLen: EQU ($-surprise)
   225                                  
   226                                  ; Clear Screen control characters 
   227 00000780 1B5B324A                cls	db	1bh, '[2J' 
   228                                  
   229                                  ; Set cursor position control characters
   230 00000784 1B5B                    pos	db	1bh, '[' 
   231 00000786 3030                    row	db	'00'
   232 00000788 3B                      	db	';'
   233 00000789 3030                    col	db	'00'
   234 0000078B 48                      	db	'H'
   235                                  
   236 0000078C 0A0D                    nl db 0xA, 0xD
   237                                  nlLen equ $-nl
   238                                  
   239                                  ; Data structure for the sleep function - seconds, nanoseconds
   240 0000078E 0100000000000000        sec	dd	1,0
   241                                  
   242                                  SECTION .text
   243                                  global _main, _sleep, _setCursor
   244                                  _main:
   245                                  
   246                                  	;;;;;  Clear the screen
   247 00000000 B804000000              	mov	eax,4
   248 00000005 BB01000000              	mov	ebx,1
   249 0000000A B9[80070000]            	mov 	ecx,cls
   250 0000000F BA04000000              	mov	edx,4
   251 00000014 CD80                    	int 	80h
   252                                  
   253                                  ;;;;  call _setcursor   pass ah=row, al=col
   254 00000016 B432                    	mov	ah,50
   255 00000018 B000                    	mov	al,0
   256 0000001A E868000000              	call	_setCursor
   257                                  
   258                                  ;;;; 	print message
   259                                  	
   260 0000001F BE[00000000]            	mov	esi, surprise
   261 00000024 BF80070000              	mov	edi, surpLen 
   262 00000029 B801000000              	mov	eax, 1 ;; a counter that denotes which coloumn we are on
   263                                  ;;;; loop through and print chars
   264                                  print:
   265 0000002E BA01000000              	mov	edx, 1
   266 00000033 8B0E                    	mov	ecx, [esi]
   267                                  	
   268 00000035 29C1                    	sub	ecx, eax ;; subtract coloumn from ascii value
   269                                  ;;;; save eax and ecx values while we print
   270 00000037 50                          push 	eax
   271 00000038 51                          push	ecx
   272                                  ;;;; print character to screen
   273 00000039 89E1                            mov 	ecx, esp
   274 0000003B B804000000                      mov     eax,4
   275 00000040 BB01000000                      mov     ebx,1
   276 00000045 CD80                            int     80h
   277                                  ;;;; retrieve saved eax and ecx values
   278 00000047 59                          pop		ecx
   279 00000048 58                          pop		eax
   280                                  ;;;; compares a held eax value to force 80 chars per line
   281 00000049 83F850                  	cmp eax, 80
   282 0000004C 7521                    	jne false
   283                                  true:
   284 0000004E B801000000               mov eax, 1
   285                                  ;;;; save eax and ecx values
   286 00000053 50                       push eax
   287 00000054 51                       push ecx
   288                                  ;;;; print a newline
   289 00000055 BA02000000                mov edx, nlLen
   290 0000005A B9[8C070000]              mov ecx, nl
   291 0000005F BB01000000                mov ebx, 1
   292 00000064 B804000000                mov eax, 4
   293 00000069 CD80                      int 80h
   294                                  ;;;; retrieve saved eax and ecx
   295 0000006B 59                       pop ecx 
   296 0000006C 58                       pop eax
   297                                  ;;;; jump to after if so false isnt also ran
   298 0000006D EB01                    jmp afterif
   299                                  
   300                                  false:
   301                                  ;;;; increment our eax value
   302 0000006F 40                       inc eax
   303                                  afterif:
   304                                  ;;;; increment esi to point towards next character
   305 00000070 83C601                  	add	esi, 1
   306 00000073 4F                      	dec	edi
   307                                  ;;;; loop back to print as long as edi doesnt equal 0, which would denote end of the data
   308 00000074 75B8                    jnz print
   309                                  
   310                                  ;;;;	sleep a second
   311 00000076 E857000000              	call	_sleep
   312                                  
   313                                  ; Normal termination code
   314 0000007B B801000000              	mov eax, 1
   315 00000080 BB00000000              	mov ebx, 0
   316 00000085 CD80                    	int 80h
   317                                  
   318                                  ;. _setcursor expects AH = row, AL = col
   319                                  ;  Only works for 1 or 2 digit numbers.
   320                                  _setCursor:
   321 00000087 60                      	pusha
   322                                  ;;; save original to get col later
   323 00000088 50                      	push	eax
   324                                  ;;;;;; process row
   325 00000089 66C1E808                	shr	ax,8	;; shift row to right
   326 0000008D B30A                    	mov	bl,10
   327 0000008F F6F3                    	div	bl	;; puts ax/10 in al, remainder in ah
   328 00000091 80C430                  	add	ah,'0'
   329 00000094 0430                    	add	al,'0'
   330 00000096 A2[86070000]            	mov	BYTE [row],al
   331 0000009B 8825[87070000]          	mov	BYTE [row+1],ah
   332                                  ;;;; process col
   333 000000A1 58                      	pop	eax	;; restore original parms
   334 000000A2 6625FF00                	and	ax,0FFh ;; erase row, leave col
   335 000000A6 B30A                    	mov	bl,10
   336 000000A8 F6F3                    	div	bl	;; puts ax/10 in al, remainder in ah
   337 000000AA 80C430                  	add	ah,'0'
   338 000000AD 0430                    	add	al,'0'
   339 000000AF A2[89070000]            	mov	BYTE [col],al
   340 000000B4 8825[8A070000]          	mov	BYTE [col+1],ah
   341                                  
   342                                  	;;;;; now print the set cursor codes
   343 000000BA B804000000              	mov	eax,4
   344 000000BF BB01000000              	mov	ebx,1
   345 000000C4 B9[84070000]            	mov 	ecx,pos
   346 000000C9 BA08000000              	mov	edx,8
   347 000000CE CD80                    	int 	80h
   348                                  
   349 000000D0 61                      	popa
   350 000000D1 C3                      	ret
   351                                  
   352                                  ;;;;; sleep requests sec,nanoseconds pause
   353                                  _sleep:
   354 000000D2 60                      	pusha
   355 000000D3 B8A2000000              	mov	eax,162
   356 000000D8 BB[8E070000]            	mov	ebx,sec
   357 000000DD B900000000              	mov	ecx,0
   358 000000E2 CD80                    	int	80h
   359 000000E4 61                      	popa
   360 000000E5 C3                      	ret
   361                                  
   362                                  
   363                                  
   364                                  
   365                                  
   366                                  
   367                                  
   368                                  
   369                                  
   370                                  
   371                                  
